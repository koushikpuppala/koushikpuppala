name: Build and Deploy Production Cluster
run-name: Build and Deploy Production Cluster - ${{ github.ref_name }}

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - 'README.md'
      - 'docs/**'
      - 'LICENSE'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - 'README.md'
      - 'docs/**'
      - 'LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  DOCKERFILE_PATH: 'Dockerfile'
  IMAGE_PORT: ${{ vars.IMAGE_PORT }}
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    environment: Production
    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@master

      # Create .env file from secrets for Docker build
      - name: Create .env file
        run: |
          echo "USER=${{ secrets.USER }}" >> .env
          echo "PASS=${{ secrets.PASS }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "MONGO_API=${{ secrets.MONGO_API }}" >> .env
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env
          echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
          echo "NEXT_PUBLIC_DEPLOY_URL=${{ secrets.NEXT_PUBLIC_DEPLOY_URL }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }}" >> .env
          echo "NEXT_PUBLIC_MICROSOFT_CLARITY=${{ secrets.NEXT_PUBLIC_MICROSOFT_CLARITY }}" >> .env
          echo "NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}" >> .env

      # Get version from package.json using GITHUB_OUTPUT
      - name: Get version
        id: version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true
          platforms: linux/amd64

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract metadata from Dockerfile
        id: metadata
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ steps.version.outputs.VERSION }}

      # Build and push Docker image with Buildx except on pull requests
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@master
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: github.event_name != 'pull_request'
    environment: Production
    runs-on: ubuntu-latest
    needs: build # Ensure deploy only runs after build completes successfully

    env:
      HOST_PORT: ${{ vars.HOST_PORT }}
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}

    steps:
      # Set up SSH key for EC2 access
      - name: Set up SSH key for EC2
        uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # SSH into EC2 and deploy the Docker container
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'EOF'
            # Pull the latest Docker image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Stop and remove any existing container
            docker stop ${{ vars.CLUSTER }} || true
            docker rm ${{ vars.CLUSTER }} || true

            # Run the new container
            docker run -d --name ${{ vars.CLUSTER }} -p ${{ env.HOST_PORT }}:${{ env.IMAGE_PORT }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          EOF

  # deploy:
  #   if: github.event_name != 'pull_request'
  #   environment: Production
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout Repository
  #       uses: actions/checkout@master

  #     # Set up AWS ECS CLI to deploy the Docker image to ECS
  #     - name: Set up AWS ECS CLI
  #       uses: aws-actions/configure-aws-credentials@master
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}

  #     # Deploy the Docker image to AWS ECS cluster
  #     - name: Deploy to AWS ECS
  #       run: |
  #         aws ecs update-service --cluster ${{ vars.CLUSTER }} --service ${{ vars.SERVICE }} --force-new-deployment
